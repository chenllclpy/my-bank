package mybank;

import java.util.*;


	public class Account {

		
	    AccountType accountType;
	    public List<Transaction> transactions;

	    DateProvider dateProvider = new DateProvider();
	    
	    public Account(AccountType accountType) {
	        this.accountType = accountType;
	        ///DECALRING OBJECT IN CONSTRUCTOR 
	        this.transactions = new ArrayList<Transaction>();
	    }
	    


	 public void deposit(double amount) {
	    if (amount <= 0) {
	         throw new IllegalArgumentException("amount must be greater than zero");
	    } else {
	         transactions.add(new Transaction(amount));

	    }
	 }

	public void withdraw(double amount) {
	    if (amount <= 0) {
	        throw new IllegalArgumentException("amount must be greater than zero");
	    } else if(amount> sumTransactions()){
	    	throw new IllegalArgumentException("Insufficient remaining");
	    } else {	
	        transactions.add(new Transaction(-amount));
	  
	    }
	}
	
    public AccountType getAccountType() {
        return accountType;
    }
	
	public List<Transaction> getTransactions(){
		return transactions;
	}
	
	public double getcheckingInterest(){
		
		Date LastTransactionDay = transactions.get(transactions.size()-1).transactionDate();
		Date currentDate = dateProvider.now();
		
		int betweenCurrentToLast = Days.daysBetween(LastTransactionDay, currentDate).getDays();
		int numberOfTransaction = transactions.size();
		
		double totalCheckingInterest = 0.0;
		double tempInterest = 0;
		double tempbalance;
		
		for(Transaction t : transactions){
			int i = 0;
			
			tempbalance += t.amount;

		
			if(numberOfTransaction>1 && i<(numberOfTransaction-1)){

			//get days period between each of transaction.
				int daysBetween = Days.daysBetween(transactions.get(i).transactionDate(), transactions.get(++i).transactionDate()).getDays();
				tempInterest += tempbalance*(daysBetween/365)*0.001;
				i++;
			
			}else if(numberOfTransaction>=1 && (numberOfTransaction-1) == i ){
			return totalCheckingInterest = tempInterest + tempbalance*(betweenCurrentToLast/365)*0.001;
			
			
			}else{
				
			throw new IllegalArgumentException("No transactions exist");
			}
		
		}
			
	}
	
	public double getSavingInterest(){
		
		
		Date LastTransactionDay = transactions.get(transactions.size()-1).transactionDate();
		Date currentDate = dateProvider.now();
		
		int betweenCurrentToLast = Days.daysBetween(LastTransactionDay, currentDate).getDays();
		int numberOfTransaction = transactions.size();
		
		double totalCheckingInterest = 0.0;
		double tempInterest;
		double tempbalance;
		
		
		for(Transaction t : transactions){
			int i = 0;
			//int daysBetween;
			tempbalance += t.amount;
			double interestRate;
						
			if (tempbalance<=1000){
				interestRate = 0.001;
			}else if (tempbalance>1000){
				interestRate = 0.002;
			}					
			
			if (numberOfTransaction>1 && i<(numberOfTransaction-1)){
				    int daysBetween = Days.daysBetween(transactions.get(i).transactionDate(), transactions.get(++i).transactionDate()).getDays();
					tempInterest += tempbalance*(daysBetween/365)*interestRate;
					i++;
			}else if(numberOfTransaction>= 1 && (numberOfTransaction-1) == i){
				return totalCheckingInterest = tempInterest  + tempbalance*(betweenCurrentToLast/365)*interestRate;
			}else{
				throw new IllegalArgumentException("No transactions exist");
			}
		}
				
	}
	
	
	//Change Maxi-Savings accounts to have an interest rate of 5% assuming no withdrawals in the past 10 days otherwise 0.1%
	public double getMaxiSavingInterest(){
		Date LastTransactionDay = transactions.get(transactions.size()-1).transactionDate();
		Date currentDate = dateProvider.now();
		int betweenCurrentToLast = Days.daysBetween(LastTransactionDay, currentDate).getDays();
		int numberOfTransaction = transactions.size();

		double totalCheckingInterest = 0.0;
		double tempInterest;
		double tempbalance;
		
		
		for(Transaction t : transactions){
			int i = 0;
			int daysBetween;
			tempbalance += t.amount;

			double interestRate = 0.001;
			
			
			if (numberOfTransaction>1 && i<(numberOfTransaction-1)){
				daysBetween = Days.daysBetween(transactions.get(i).transactionDate(), transactions.get(++i).transactionDate()).getDays();
				if(daysBetween>10 && ((tempbalance + t.amount) > tempbalance)){
					interestRate = 0.05;
				}	
				tempInterest += tempbalance*(daysBetween/365)*interestRate;
				i++;
			}else if(numberOfTransaction>= 1 && (numberOfTransaction-1) == i){
				if(betweenCurrentToLast>10){
					interestRate = 0.05;
				}
				return totalCheckingInterest = tempInterest  + tempbalance*(betweenCurrentToLast/365)*interestRate;
			}else{
				throw new IllegalArgumentException("No transactions exist");
			}
		}
		
  }
	

	public double interestEarned() {
	    double amount = sumTransactions();
	    switch(accountType){
	          case CHECKING:                                                                                                                        
	          return getcheckingInterest() ;	              
	          case SAVINGS:
	          return getSavingInterest();	            		
	           //// need work on    MaxI_SaVing
	          case MAXI_SAVINGS:              
	          return getMaxiSavingInterest();
	          default:
	          return amount * 0.001;
	        }
	    }

	public double sumTransactions() {
	     return checkIfTransactionsExist(true);
	 }

	 private double checkIfTransactionsExist(boolean checkAll) {
	     double amount = 0.0;
	     for (Transaction t: transactions)
	         amount += t.amount;
	     return amount;
	    }


}
